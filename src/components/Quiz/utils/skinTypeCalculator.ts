
import { SkinTypeScore } from './skinTypes';
import { 
  QUESTION_WEIGHTS, 
  SKIN_CHARACTERISTICS, 
  SKIN_STATE_CHARACTERISTICS, 
  SKIN_CONCERNS, 
  SKIN_STATE_CONCERNS
} from './skinTypeConfig';
import { calculateConfidence } from './skinTypeValidation';

export const calculateSkinType = (answers: Record<string, string>): SkinTypeScore => {
  console.log("üöÄ NOUVEAU CALCUL DE TYPE DE PEAU - VERSION CORRIG√âE");
  console.log("R√©ponses re√ßues:", answers);
  
  // Initialiser les scores pour les types de peau
  const typeScores: Record<string, number> = {
    "dry": 0,
    "combination": 0,
    "oily": 0,
    "normal": 0
  };
  
  // Score de sensibilit√©
  let sensitivityScore = 0;
  let sensitivityQuestions = 0;
  
  // Calculer les scores avec logique DIRECTE
  Object.entries(answers).forEach(([questionId, answer]) => {
    const questionWeight = QUESTION_WEIGHTS.find(w => w.questionId === questionId);
    if (!questionWeight) {
      console.log(`‚ö†Ô∏è Question non trouv√©e: ${questionId}`);
      return;
    }
    
    const { weight, category } = questionWeight;
    console.log(`üìã Question: ${questionId}, R√©ponse: ${answer}, Poids: ${weight}`);
    
    if (category === 'state') {
      // Questions de sensibilit√©
      if (answer === "sensible") {
        sensitivityScore += 3 * weight;
        sensitivityQuestions++;
        console.log(`   ‚úÖ +${(3 * weight).toFixed(1)} points sensibilit√©`);
      } else if (answer === "normal") {
        sensitivityQuestions++;
        console.log(`   ‚úÖ +0 points sensibilit√© (r√©ponse normale)`);
      }
    } else {
      // Questions de type de peau - Attribution DIRECTE
      if (answer === "seche") {
        typeScores["dry"] += 3 * weight;
        console.log(`   ‚úÖ +${(3 * weight).toFixed(1)} points PEAU S√àCHE`);
      } else if (answer === "grasse") {
        typeScores["oily"] += 3 * weight;
        console.log(`   ‚úÖ +${(3 * weight).toFixed(1)} points PEAU GRASSE`);
      } else if (answer === "mixte") {
        typeScores["combination"] += 3 * weight;
        console.log(`   ‚úÖ +${(3 * weight).toFixed(1)} points PEAU MIXTE`);
      } else if (answer === "normale") {
        typeScores["normal"] += 3 * weight;
        console.log(`   ‚úÖ +${(3 * weight).toFixed(1)} points PEAU NORMALE`);
      }
    }
  });
  
  console.log("üìä SCORES FINAUX:", typeScores);
  
  // D√©terminer le type dominant
  const maxTypeScore = Math.max(...Object.values(typeScores));
  const dominantType = Object.keys(typeScores).find(type => typeScores[type] === maxTypeScore) || "normal";
  
  // Si tous les scores sont √† 0, forcer "normal"
  if (maxTypeScore === 0) {
    typeScores["normal"] = 1;
    console.log("‚ö†Ô∏è Aucun score d√©tect√©, attribution par d√©faut: normal");
  }
  
  // D√©terminer si la peau est sensible
  const maxSensitivityPossible = sensitivityQuestions * 3 * 2; // questions * score max * poids max
  const sensitivityThreshold = maxSensitivityPossible * 0.4; // Seuil √† 40%
  const isSensitive = sensitivityScore > sensitivityThreshold;
  
  console.log("üéØ SENSIBILIT√â:", {
    score: sensitivityScore,
    threshold: sensitivityThreshold,
    isSensitive
  });
  
  // Calculer le score de confiance
  const confidence = calculateConfidence(answers, typeScores);
  
  // Obtenir les caract√©ristiques et pr√©occupations
  let characteristics = [...(SKIN_CHARACTERISTICS[dominantType] || [])];
  let concerns = [...(SKIN_CONCERNS[dominantType] || [])];
  
  // Ajouter les caract√©ristiques d'√©tat si applicable
  if (isSensitive) {
    characteristics = [...characteristics, ...(SKIN_STATE_CHARACTERISTICS["sensitive"] || [])];
    concerns = [...concerns, ...(SKIN_STATE_CONCERNS["sensitive"] || [])];
  }
  
  const result = {
    type: dominantType,
    state: isSensitive ? "sensitive" : null,
    score: maxTypeScore,
    confidence,
    characteristics,
    concerns
  };
  
  console.log("üèÜ DIAGNOSTIC FINAL:", result);
  
  return result;
};

// Re-export everything for backward compatibility
export * from './skinTypes';
export * from './skinTypeValidation';
export * from './skinTypeRecommendations';
