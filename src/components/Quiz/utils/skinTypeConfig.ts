import { QuestionWeight } from './skinTypes';

// Pond√©ration des questions par importance
export const QUESTION_WEIGHTS: QuestionWeight[] = [
  // Questions primaires (poids √©lev√©) - Type de peau
  { questionId: "sensation_apres_nettoyage", weight: 3.0, category: 'primary' },
  { questionId: "fin_journee", weight: 2.5, category: 'primary' },
  { questionId: "pores", weight: 2.0, category: 'primary' },
  { questionId: "imperfections", weight: 2.0, category: 'primary' },
  
  // Questions secondaires (poids moyen) - Type de peau
  { questionId: "reaction_soleil", weight: 1.5, category: 'secondary' },
  { questionId: "souci_principal", weight: 1.5, category: 'secondary' },
  { questionId: "texture_creme", weight: 1.2, category: 'secondary' },
  { questionId: "tiraillements_frequents", weight: 1.8, category: 'secondary' },
  
  // Questions d'√©tat (poids √©lev√©) - Sensibilit√©
  { questionId: "nouveaux_produits", weight: 2.0, category: 'state' },
  { questionId: "sensation_inconfort", weight: 1.8, category: 'state' },
  { questionId: "rougeurs_frequentes", weight: 1.5, category: 'state' },
  { questionId: "reaction_environnement", weight: 1.5, category: 'state' },
  
  // Questions de validation (poids faible)
  { questionId: "maquillage_journee", weight: 0.8, category: 'validation' }
];

// Mapping des r√©ponses vers les types de peau avec scores (sans sensible)
export const ANSWER_MAPPING: Record<string, Record<string, number>> = {
  "sensation_apres_nettoyage": {
    "Tr√®s s√®che": 3,
    "S√®che": 3,
    "Tiraillements": 3,
    "Inconfort": 2.5,
    "Rugueuse": 2.5,
    "Desquamation": 3,
    
    "Grasse": 0,
    "Brillante": 0,
    "Huileuse": 0,
    "S√©bum visible": 0,
    
    "Mixte": 1,
    "Zone T brillante": 1,
    "Contrast√©e": 1,
    "Diff√©rente selon zone": 1,
    
    "Normale": 1,
    "√âquilibr√©e": 1,
    "Confortable": 1,
    "Douce": 1,
    
    "seche": 3, "mixte": 1, "grasse": 0, "normale": 1
  },
  
  "fin_journee": {
    "Tr√®s s√®che": 3,
    "S√®che": 3,
    "Tiraillements": 3,
    "Desquamation": 3,
    "Inconfortable": 2.5,
    "Rugueuse": 2.5,
    
    "Tr√®s brillante": 0,
    "Brillante": 0,
    "Huileuse": 0,
    "S√©bum visible": 0,
    "Grasse": 0,
    
    "Zone T brillante": 1,
    "Joues s√®ches": 1,
    "Contrast√©e": 1,
    "Mixte": 1,
    
    "Normale": 1,
    "√âquilibr√©e": 1,
    "Confortable": 1,
    "Douce": 1,
    
    "seche": 3, "mixte": 1, "grasse": 0, "normale": 1
  },
  
  "tiraillements_frequents": {
    "Oui": 3,
    "Souvent": 3,
    "Tr√®s souvent": 3,
    "R√©guli√®rement": 2.5,
    "Quotidiennement": 3,
    
    "Parfois": 1.5,
    "Occasionnellement": 1,
    "Rarement": 0.5,
    "Non": 0,
    "Jamais": 0,
    
    "seche": 3, "mixte": 1, "grasse": 0, "normale": 1
  },
  
  "pores": {
    "Tr√®s visibles": 3,
    "Dilat√©s": 3,
    "Obstru√©s": 3,
    "Nombreux": 3,
    "Larges": 3,
    "Points noirs": 3,
    
    "Tr√®s fins": 0,
    "Invisibles": 0,
    "Discrets": 0,
    "Ferm√©s": 0,
    
    "Zone T visible": 2,
    "Moyens": 2,
    "Quelques zones": 2,
    "Mixtes": 2,
    
    "Normaux": 1,
    "√âquilibr√©s": 1,
    "Peu visibles": 1,
    
    "seche": 0, "mixte": 2, "grasse": 3, "normale": 1
  },
  
  "imperfections": {
    "Beaucoup": 3,
    "Fr√©quentes": 3,
    "Points noirs": 3,
    "Acn√©": 3,
    "Boutons": 3,
    "Com√©dons": 3,
    "Nombreuses": 3,
    
    "Aucune": 1,
    "Tr√®s rares": 1,
    "Quasi-inexistantes": 1,
    
    "Zone T seulement": 2,
    "Occasionnelles": 2,
    "Localis√©es": 2,
    "Quelques unes": 2,
    
    "Rares": 1,
    "Peu": 1,
    "Sporadiques": 1,
    
    "seche": 1, "mixte": 2, "grasse": 3, "normale": 1
  },
  
  "reaction_soleil": {
    "Br√ªle facilement": 2,
    "Rougit vite": 2,
    "Tr√®s sensible": 2,
    
    "Bronze facilement": 0,
    "R√©sistante": 0,
    "Peu sensible": 0,
    
    "Normale": 1,
    "Mod√©r√©e": 1,
    
    "seche": 2, "mixte": 1, "grasse": 0, "normale": 1
  },
  
  "souci_principal": {
    "S√©cheresse": 3,
    "Tiraillements": 3,
    "Desquamation": 3,
    "Rides": 2,
    "Manque d'√©clat": 2,
    
    "Brillance": 1,
    "Imperfections": 3,
    "Pores dilat√©s": 3,
    "Acn√©": 3,
    
    "Zones contrast√©es": 2,
    "Gestion complexe": 2,
    
    "Pr√©vention": 1,
    "Maintien": 1,
    
    "seche": 3, "mixte": 2, "grasse": 1, "normale": 1
  },
  
  "texture_creme": {
    "Riche": 3,
    "Nourrissante": 3,
    "√âpaisse": 3,
    "Huile": 2.5,
    
    "L√©g√®re": 0,
    "Fluide": 0,
    "Gel": 0,
    "Sans huile": 0,
    
    "Modulable": 2,
    "Adaptable": 2,
    
    "√âquilibr√©e": 1,
    "Normale": 1,
    
    "seche": 3, "mixte": 2, "grasse": 0, "normale": 1
  },
  
  "maquillage_journee": {
    "Dispara√Æt": 2,
    "S'effrite": 2,
    "Accroche mal": 2,
    
    "Glisse": 0,
    "Devient brillant": 0,
    "File": 0,
    
    "Tient bien": 1,
    "Normal": 1,
    
    "seche": 2, "mixte": 1, "grasse": 0, "normale": 1
  }
};

// Mapping des r√©ponses vers les √©tats de peau
export const STATE_MAPPING: Record<string, Record<string, number>> = {
  "nouveaux_produits": {
    "Oui": 3,
    "Souvent": 3,
    "Tr√®s souvent": 3,
    "R√©guli√®rement": 2.5,
    "Toujours": 3,
    "Fr√©quemment": 2.5,
    
    "Parfois": 1.5,
    "Occasionnellement": 1,
    "Rarement": 0.5,
    "Non": 0,
    "Jamais": 0,
    
    "sensible": 3, "normal": 1
  },
  
  "sensation_inconfort": {
    "Oui": 3,
    "Souvent": 3,
    "Tr√®s souvent": 3,
    "R√©guli√®rement": 2.5,
    "Quotidiennement": 3,
    "Fr√©quemment": 2.5,
    
    "Parfois": 1.5,
    "Occasionnellement": 1,
    "Rarement": 0.5,
    "Non": 0,
    "Jamais": 0,
    
    "sensible": 3, "normal": 1
  },
  
  "rougeurs_frequentes": {
    "Oui": 3,
    "Souvent": 3,
    "Tr√®s souvent": 3,
    "R√©guli√®rement": 2.5,
    "Quotidiennement": 3,
    
    "Parfois": 1.5,
    "Occasionnellement": 1,
    "Rarement": 0.5,
    "Non": 0,
    "Jamais": 0
  },
  
  "reaction_environnement": {
    "Oui": 3,
    "Souvent": 3,
    "Tr√®s souvent": 3,
    "Toujours": 3,
    "R√©guli√®rement": 2.5,
    
    "Parfois": 1.5,
    "Occasionnellement": 1,
    "Rarement": 0.5,
    "Non": 0,
    "Jamais": 0
  }
};

// Caract√©ristiques par type de peau
export const SKIN_CHARACTERISTICS: Record<string, string[]> = {
  "dry": [
    "Tiraillements fr√©quents",
    "Sensation de s√©cheresse",
    "Desquamation possible",
    "Rides plus visibles",
    "Texture rugueuse",
    "Pores tr√®s fins",
    "Manque d'√©clat"
  ],
  "combination": [
    "Zone T brillante",
    "Joues normales √† s√®ches",
    "Pores visibles sur le nez",
    "Contraste entre zones",
    "Imperfections localis√©es",
    "Gestion complexe",
    "Besoins diff√©renci√©s"
  ],
  "oily": [
    "Brillance excessive",
    "Pores dilat√©s",
    "Imperfections fr√©quentes",
    "Texture √©paisse",
    "S√©bum abondant",
    "Maquillage qui bouge",
    "Points noirs"
  ],
  "normal": [
    "√âquilibre optimal",
    "Texture lisse",
    "Pores discrets",
    "Hydratation √©quilibr√©e",
    "Peu d'imperfections",
    "√âclat naturel",
    "Confort quotidien"
  ]
};

// Caract√©ristiques par √©tat de peau
export const SKIN_STATE_CHARACTERISTICS: Record<string, string[]> = {
  "sensitive": [
    "R√©actions cutan√©es fr√©quentes",
    "Rougeurs et irritations",
    "Sensations d'inconfort",
    "Intol√©rance aux produits",
    "R√©activit√© aux stimuli",
    "Barri√®re cutan√©e fragile",
    "Picotements ou br√ªlures"
  ]
};

// Pr√©occupations par type de peau
export const SKIN_CONCERNS: Record<string, string[]> = {
  "dry": [
    "Hydratation insuffisante",
    "Perte d'√©lasticit√©",
    "Apparition de rides pr√©coces",
    "Desquamation visible",
    "Sensations d'inconfort",
    "Manque d'√©clat",
    "Absorption difficile des produits"
  ],
  "combination": [
    "Gestion des zones mixtes",
    "√âquilibre hydratation/s√©bor√©gulation",
    "Imperfections localis√©es",
    "Contraste entre zones",
    "Routine adapt√©e complexe",
    "Produits multi-zones",
    "Besoins contradictoires"
  ],
  "oily": [
    "Contr√¥le du s√©bum excessif",
    "Imperfections et acn√©",
    "Pores dilat√©s et obstru√©s",
    "Brillance excessive",
    "Texture irr√©guli√®re",
    "Points noirs r√©currents",
    "Tenue du maquillage"
  ],
  "normal": [
    "Maintien de l'√©quilibre",
    "Pr√©vention du vieillissement",
    "Protection solaire",
    "Pr√©servation de la texture",
    "√âquilibre hydratation",
    "Conservation de l'√©clat",
    "Pr√©vention des d√©s√©quilibres"
  ]
};

// Pr√©occupations par √©tat de peau
export const SKIN_STATE_CONCERNS: Record<string, string[]> = {
  "sensitive": [
    "R√©activit√© cutan√©e excessive",
    "Rougeurs et inflammations",
    "Intol√©rance aux produits",
    "Sensations d'inconfort persistantes",
    "Barri√®re cutan√©e compromise",
    "R√©actions allergiques",
    "Choix de produits limit√©s"
  ]
};

// ‚úÖ FONCTIONS DE DEBUG ET VALIDATION
export const debugSkinTypeCalculation = (answers: Record<string, string>) => {
  const typeScores: Record<string, number> = {
    "dry": 0, "combination": 0, "oily": 0, "normal": 0
  };
  const stateScores: Record<string, number> = {
    "sensitive": 0, "normal": 0
  };

  console.log("üîç DEBUG CALCUL TYPE DE PEAU");
  console.log("R√©ponses re√ßues:", answers);
  console.log("=====================================");

  Object.entries(answers).forEach(([questionId, answer]) => {
    const questionWeight = QUESTION_WEIGHTS.find(w => w.questionId === questionId);
    if (!questionWeight) {
      console.log(`‚ö†Ô∏è Question non trouv√©e: ${questionId}`);
      return;
    }

    const { weight, category } = questionWeight;

    console.log(`\nüìã Question: ${questionId}`);
    console.log(`   R√©ponse: "${answer}"`);
    console.log(`   Cat√©gorie: ${category}`);
    console.log(`   Poids: ${weight}`);

    if (category === 'state') {
      // Questions de sensibilit√©
      const stateMapping = STATE_MAPPING[questionId];
      if (stateMapping && stateMapping[answer] !== undefined) {
        const score = stateMapping[answer] * weight;
        if (stateMapping[answer] > 1.5) {
          stateScores["sensitive"] += score;
          console.log(`   ‚úÖ Score sensible: +${score.toFixed(2)}`);
        } else {
          stateScores["normal"] += score;
          console.log(`   ‚úÖ Score normal: +${score.toFixed(2)}`);
        }
      } else {
        console.log(`   ‚ùå R√©ponse non mapp√©e dans STATE_MAPPING`);
      }
    } else {
      // Questions de type de peau
      const typeMapping = ANSWER_MAPPING[questionId];
      if (typeMapping) {
        if (typeMapping[answer] !== undefined) {
          // R√©ponse directe trouv√©e
          const baseScore = typeMapping[answer];
          const score = baseScore * weight;
          
          // Attribution intelligente des scores
          if (baseScore >= 2.5) {
            typeScores["dry"] += score;
            console.log(`   ‚úÖ Score peau s√®che: +${score.toFixed(2)}`);
          } else if (baseScore <= 0.5) {
            typeScores["oily"] += (3 - baseScore) * weight;
            console.log(`   ‚úÖ Score peau grasse: +${((3 - baseScore) * weight).toFixed(2)}`);
          } else if (baseScore >= 1.5 && baseScore < 2.5) {
            typeScores["combination"] += score;
            console.log(`   ‚úÖ Score peau mixte: +${score.toFixed(2)}`);
          } else {
            typeScores["normal"] += score;
            console.log(`   ‚úÖ Score peau normale: +${score.toFixed(2)}`);
          }
        } else {
          console.log(`   ‚ùå R√©ponse "${answer}" non mapp√©e`);
          console.log(`   Mappings disponibles:`, Object.keys(typeMapping));
        }
      } else {
        console.log(`   ‚ùå Aucun mapping trouv√© pour cette question`);
      }
    }
  });

  console.log("\nüìä SCORES FINAUX:");
  console.log("=================");
  console.log("Types de peau:");
  Object.entries(typeScores).forEach(([type, score]) => {
    console.log(`   ${type}: ${score.toFixed(2)}`);
  });
  console.log("√âtats de peau:");
  Object.entries(stateScores).forEach(([state, score]) => {
    console.log(`   ${state}: ${score.toFixed(2)}`);
  });

  const maxTypeScore = Math.max(...Object.values(typeScores));
  const dominantType = Object.keys(typeScores).find(type => typeScores[type] === maxTypeScore);

  const totalStateWeight = QUESTION_WEIGHTS.filter(w => w.category === 'state').reduce((sum, w) => sum + w.weight, 0);
  const sensitivityThreshold = totalStateWeight * 0.25; // ‚úÖ Seuil r√©duit √† 25%
  const isSensitive = stateScores["sensitive"] > sensitivityThreshold;

  console.log(`\nüèÜ DIAGNOSTIC FINAL:`);
  console.log(`   Type: ${dominantType} (score: ${maxTypeScore.toFixed(2)})`);
  console.log(`   √âtat: ${isSensitive ? 'sensitive' : 'normal'} (seuil: ${sensitivityThreshold.toFixed(2)}, score: ${stateScores["sensitive"].toFixed(2)})`);

  return {
    type: dominantType,
    state: isSensitive ? 'sensitive' : null,
    typeScores,
    stateScores,
    threshold: sensitivityThreshold
  };
};

export const validateConfiguration = () => {
  console.log("üîç VALIDATION DE LA CONFIGURATION");
  console.log("===================================");

  let errors = 0;

  // V√©rifier que toutes les questions ont un mapping
  QUESTION_WEIGHTS.forEach(({ questionId, category }) => {
    if (category === 'state') {
      if (!STATE_MAPPING[questionId]) {
        console.error(`‚ùå STATE_MAPPING manquant: ${questionId}`);
        errors++;
      } else {
        console.log(`‚úÖ STATE_MAPPING OK: ${questionId}`);
      }
    } else {
      if (!ANSWER_MAPPING[questionId]) {
        console.error(`‚ùå ANSWER_MAPPING manquant: ${questionId}`);
        errors++;
      } else {
        console.log(`‚úÖ ANSWER_MAPPING OK: ${questionId}`);
      }
    }
  });

  console.log(`\nüìà R√âSUM√â:`);
  console.log(`   Questions totales: ${QUESTION_WEIGHTS.length}`);
  console.log(`   Questions type: ${QUESTION_WEIGHTS.filter(q => q.category !== 'state').length}`);
  console.log(`   Questions √©tat: ${QUESTION_WEIGHTS.filter(q => q.category === 'state').length}`);
  console.log(`   Erreurs: ${errors}`);

  if (errors === 0) {
    console.log(`‚úÖ Configuration valide !`);
  } else {
    console.log(`‚ùå ${errors} erreur(s) √† corriger`);
  }

  return errors === 0;
};